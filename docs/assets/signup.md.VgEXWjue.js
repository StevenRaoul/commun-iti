import{_ as e,c as a,o as r,V as i}from"./chunks/framework.2xniYgV0.js";const g=JSON.parse('{"title":"Sign Up","description":"","frontmatter":{},"headers":[],"relativePath":"signup.md","filePath":"signup.md"}'),t={name:"signup.md"},o=i('<h1 id="sign-up" tabindex="-1">Sign Up <a class="header-anchor" href="#sign-up" aria-label="Permalink to &quot;Sign Up&quot;">​</a></h1><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>Le Sign Up est l&#39;étape qui permet d&#39;enregistrer un nouvel utilisateur sur la plateforme. Le but est donc de créer un formulaire pour récupérer les informations de l&#39;utilisateur.</p><p><strong>SFC</strong> : <code>/app/pages/RegisterPage.vue</code>.</p><h3 id="script" tabindex="-1">Script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;Script&quot;">​</a></h3><p>La variable <code>registerModel</code>contient l&#39;ensemble des données du formulaire.</p><p>La variable <code>registerFormRules</code> contient les règles de validation pour chacun des champs du formulaire. Il peut y avoir plusieurs règle par champs, d&#39;où la présence du tableau.</p><p>La fonction <code>onSubmit</code> est la fonction qui doit être appelé lorsque l&#39;<em>event</em> <code>submit</code> du formulaire est émis.</p><h3 id="template" tabindex="-1">Template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;Template&quot;">​</a></h3><p>Contient un formulaire de la <a href="https://element-plus.org/en-US/component/form.html" target="_blank" rel="noreferrer">librairie Vue Element</a>. Chaque input doit utiliser un des composant de la librairie et doit être placé à l&#39;intérieur du composant <code>&lt;el-form-item&gt;&lt;/el-form-item&gt;</code> comme définit dans la documentation.</p><h2 id="level-i" tabindex="-1">Level I <a class="header-anchor" href="#level-i" aria-label="Permalink to &quot;Level I&quot;">​</a></h2><ol><li>Rendre le mot de passe et la confirmation de mot de passe obligatoires.</li><li>Rajouter une règle pour le champs <code>username</code> pour valider le <code>username</code> avec la <code>RegExp</code> <code>userNameRegex</code> en vous appuyant sur la propriété <code>pattern</code> d&#39;une règle.</li><li><code>await form.validate()</code> permet de valider les données du formulaires. Vérifier après la validation que le <code>password</code> correspond bien au <code>passwordConfirmation</code></li><li>Utiliser <code>userApi</code> pour enregistrer l&#39;utilisateur.</li><li>En cas de succès , redirigez l&#39;utilisateur sur la page de login avec le <code>router</code>.</li></ol><h2 id="level-ii" tabindex="-1">Level II <a class="header-anchor" href="#level-ii" aria-label="Permalink to &quot;Level II&quot;">​</a></h2><ol><li>Rajouter des messages de validation pour chaque règle.</li><li>Aidez vous de l&#39;<code>UserAPI</code> pour vérifier si l&#39;utilisateur existe déjà. Si l&#39;utilisateur existe, informer le en vous aidant de l&#39;API <a href="https://element-plus.org/en-US/component/message.html" target="_blank" rel="noreferrer">ElMEssage</a> d&#39;<em>Element</em>.</li></ol>',14),l=[o];function s(n,d,c,u,p,m){return r(),a("div",null,l)}const f=e(t,[["render",s]]);export{g as __pageData,f as default};
