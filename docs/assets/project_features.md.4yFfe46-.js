import{_ as e,c as a,o as i,V as l}from"./chunks/framework.2xniYgV0.js";const f=JSON.parse('{"title":"Liste des objectifs du TP","description":"","frontmatter":{},"headers":[],"relativePath":"project_features.md","filePath":"project_features.md"}'),r={name:"project_features.md"},t=l('<h1 id="liste-des-objectifs-du-tp" tabindex="-1">Liste des objectifs du TP <a class="header-anchor" href="#liste-des-objectifs-du-tp" aria-label="Permalink to &quot;Liste des objectifs du TP&quot;">​</a></h1><h2 id="sing-up" tabindex="-1">Sing Up <a class="header-anchor" href="#sing-up" aria-label="Permalink to &quot;Sing Up&quot;">​</a></h2><h3 id="level-i" tabindex="-1">Level I <a class="header-anchor" href="#level-i" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Rendre le mot de passe et la confirmation de mot de passe obligatoires</p><p>⬜ Rajouter la règle de validation avec la Regexp pour le champs <code>username</code></p><p>⬜ Utiliser <code>userApi</code> pour enregistrer l&#39;utilisateur</p><p>⬜ Valider la confirmation de mot de passe</p><p>⬜ Rediriger l&#39;utilisateur sur la page de login avec le <code>router</code> en cas de succès</p><h3 id="level-ii" tabindex="-1">Level II <a class="header-anchor" href="#level-ii" aria-label="Permalink to &quot;Level II&quot;">​</a></h3><p>⬜ Rajouter des messages de validation pour chaque règle</p><p>⬜ Afficher une pop-up d&#39;erreur si l&#39;utilisateur existe déjà</p><h2 id="sign-in" tabindex="-1">Sign In <a class="header-anchor" href="#sign-in" aria-label="Permalink to &quot;Sign In&quot;">​</a></h2><h3 id="level-i-1" tabindex="-1">Level I <a class="header-anchor" href="#level-i-1" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Ajouter les champs manquants</p><p>⬜ Ajouter les 2 règles de validation</p><p>⬜ Connecter la fonction <code>onSubmit</code></p><p>⬜ Authentifier l&#39;utilisateur</p><p>⬜ Redirection en cas de succès</p><h3 id="level-ii-1" tabindex="-1">Level II <a class="header-anchor" href="#level-ii-1" aria-label="Permalink to &quot;Level II&quot;">​</a></h3><p>⬜ Afficher un message d&#39;erreur si le <em>Sign In</em> a échoué</p><h2 id="room" tabindex="-1">Room <a class="header-anchor" href="#room" aria-label="Permalink to &quot;Room&quot;">​</a></h2><h3 id="level-i-2" tabindex="-1">Level I <a class="header-anchor" href="#level-i-2" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Afficher la liste des salons dans le menu de gauche</p><p>⬜ Naviguer entre les salons avec Vue</p><h3 id="level-ii-2" tabindex="-1">Level II <a class="header-anchor" href="#level-ii-2" aria-label="Permalink to &quot;Level II&quot;">​</a></h3><p>⬜ Rediriger vers le 1er salon par défaut</p><p>⬜ Terminer la modal de création de salon</p><p>⬜ Terminer la modal pour rejoindre un salon</p><p>⬜ Persister et rediriger sur le dernier salon visité</p><h2 id="messages" tabindex="-1">Messages <a class="header-anchor" href="#messages" aria-label="Permalink to &quot;Messages&quot;">​</a></h2><h3 id="level-i-3" tabindex="-1">Level I <a class="header-anchor" href="#level-i-3" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Récupérer la saisie de l&#39;utilisateur et l&#39;envoyer</p><p>⬜ Lister les messages du salon et rafraîchir la liste à chaque changement de salon</p><p>⬜ Afficher toutes les informations de base d&#39;un message : username, photo, date, message</p><p>⬜ Remplacer les retours chariot</p><p>⬜ Formatter la date</p><h3 id="level-ii-3" tabindex="-1">Level II <a class="header-anchor" href="#level-ii-3" aria-label="Permalink to &quot;Level II&quot;">​</a></h3><p>⬜ Insérer les nouveaux messages reçus en temps réel</p><p>⬜ Remplacer les liens par des balises <code>a</code></p><p>⬜ Ajouter les réactions sous le message et faire en sorte de pouvoir en ajouter et en supprimer</p><p>⬜ Parser et afficher les différents types d&#39;attachment : Youtube, Image, Vidéo, Audio et Site web</p><p>⬜ Charger plus de message au scroll dans le salon</p><h2 id="user" tabindex="-1">User <a class="header-anchor" href="#user" aria-label="Permalink to &quot;User&quot;">​</a></h2><h3 id="level-i-4" tabindex="-1">Level I <a class="header-anchor" href="#level-i-4" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Rajouter le bouton pour ouvrir la modal</p><p>⬜ Terminer l&#39;implémentation de la modal d&#39;édition</p><h2 id="notification" tabindex="-1">Notification <a class="header-anchor" href="#notification" aria-label="Permalink to &quot;Notification&quot;">​</a></h2><h3 id="level-i-5" tabindex="-1">Level I <a class="header-anchor" href="#level-i-5" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Rajouter le bouton pour le menu des notifications et gérer l&#39;ouverture</p><p>⬜ Afficher une pop-up in app par notification (room_joined et new_reaction minimum) en omettant celles produites par l&#39;utilisateur connecté.</p><h3 id="level-ii-4" tabindex="-1">Level II <a class="header-anchor" href="#level-ii-4" aria-label="Permalink to &quot;Level II&quot;">​</a></h3><p>⬜ Lister les notifications dans le menu</p><p>⬜ Persister les notifications</p><p>⬜ Afficher les notifications Desktop seulement si l&#39;application n&#39;est pas visible dans le navigateur</p><h2 id="deploiement" tabindex="-1">Déploiement <a class="header-anchor" href="#deploiement" aria-label="Permalink to &quot;Déploiement&quot;">​</a></h2><h3 id="level-i-6" tabindex="-1">Level I <a class="header-anchor" href="#level-i-6" aria-label="Permalink to &quot;Level I&quot;">​</a></h3><p>⬜ Déployer la base de données</p><p>⬜ Déployer le serveur</p><h3 id="level-ii-5" tabindex="-1">Level II <a class="header-anchor" href="#level-ii-5" aria-label="Permalink to &quot;Level II&quot;">​</a></h3><p>⬜ Déployer l&#39;application</p>',60),o=[t];function s(n,d,p,u,c,h){return i(),a("div",null,o)}const v=e(r,[["render",s]]);export{f as __pageData,v as default};
